/**
 * This class is generated by jOOQ
 */
package sxj.db.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import sxj.db.tables.AdminUser;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminUserRecord extends UpdatableRecordImpl<AdminUserRecord> implements Record3<String, String, Integer> {

    private static final long serialVersionUID = 126463022;

    /**
     * Setter for <code>barbershopvip.admin_user.username</code>. 用户名
     */
    public AdminUserRecord setUsername(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>barbershopvip.admin_user.username</code>. 用户名
     */
    public String getUsername() {
        return (String) get(0);
    }

    /**
     * Setter for <code>barbershopvip.admin_user.password</code>. 密码
     */
    public AdminUserRecord setPassword(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>barbershopvip.admin_user.password</code>. 密码
     */
    public String getPassword() {
        return (String) get(1);
    }

    /**
     * Setter for <code>barbershopvip.admin_user.id</code>.
     */
    public AdminUserRecord setId(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>barbershopvip.admin_user.id</code>.
     */
    public Integer getId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return AdminUser.ADMIN_USER.USERNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return AdminUser.ADMIN_USER.PASSWORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return AdminUser.ADMIN_USER.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getPassword();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUserRecord value1(String value) {
        setUsername(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUserRecord value2(String value) {
        setPassword(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUserRecord value3(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUserRecord values(String value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AdminUserRecord
     */
    public AdminUserRecord() {
        super(AdminUser.ADMIN_USER);
    }

    /**
     * Create a detached, initialised AdminUserRecord
     */
    public AdminUserRecord(String username, String password, Integer id) {
        super(AdminUser.ADMIN_USER);

        set(0, username);
        set(1, password);
        set(2, id);
    }
}
