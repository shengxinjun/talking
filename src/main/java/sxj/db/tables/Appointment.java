/**
 * This class is generated by jOOQ
 */
package sxj.db.tables;


import com.util.Timestamp2DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import sxj.db.Barbershopvip;
import sxj.db.Keys;
import sxj.db.tables.records.AppointmentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Appointment extends TableImpl<AppointmentRecord> {

    private static final long serialVersionUID = -95821548;

    /**
     * The reference instance of <code>barbershopvip.appointment</code>
     */
    public static final Appointment APPOINTMENT = new Appointment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppointmentRecord> getRecordType() {
        return AppointmentRecord.class;
    }

    /**
     * The column <code>barbershopvip.appointment.id</code>.
     */
    public final TableField<AppointmentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>barbershopvip.appointment.context</code>. 消费类型
     */
    public final TableField<AppointmentRecord, String> CONTEXT = createField("context", org.jooq.impl.SQLDataType.VARCHAR.length(200), this, "消费类型");

    /**
     * The column <code>barbershopvip.appointment.money</code>. 消费金额
     */
    public final TableField<AppointmentRecord, Double> MONEY = createField("money", org.jooq.impl.SQLDataType.FLOAT, this, "消费金额");

    /**
     * The column <code>barbershopvip.appointment.flag</code>. 是否消费
     */
    public final TableField<AppointmentRecord, Integer> FLAG = createField("flag", org.jooq.impl.SQLDataType.INTEGER, this, "是否消费");

    /**
     * The column <code>barbershopvip.appointment.vip_id</code>. vip主键
     */
    public final TableField<AppointmentRecord, Integer> VIP_ID = createField("vip_id", org.jooq.impl.SQLDataType.INTEGER, this, "vip主键");

    /**
     * The column <code>barbershopvip.appointment.appoint_time</code>. 预约时间
     */
    public final TableField<AppointmentRecord, Date> APPOINT_TIME = createField("appoint_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "预约时间", new Timestamp2DateConverter());

    /**
     * Create a <code>barbershopvip.appointment</code> table reference
     */
    public Appointment() {
        this("appointment", null);
    }

    /**
     * Create an aliased <code>barbershopvip.appointment</code> table reference
     */
    public Appointment(String alias) {
        this(alias, APPOINTMENT);
    }

    private Appointment(String alias, Table<AppointmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Appointment(String alias, Table<AppointmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Barbershopvip.BARBERSHOPVIP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AppointmentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_APPOINTMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AppointmentRecord> getPrimaryKey() {
        return Keys.KEY_APPOINTMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AppointmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AppointmentRecord>>asList(Keys.KEY_APPOINTMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Appointment as(String alias) {
        return new Appointment(alias, this);
    }

    /**
     * Rename this table
     */
    public Appointment rename(String name) {
        return new Appointment(name, null);
    }
}
