/**
 * This class is generated by jOOQ
 */
package sxj.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import sxj.db.Barbershopvip;
import sxj.db.Keys;
import sxj.db.tables.records.AdminUserRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminUser extends TableImpl<AdminUserRecord> {

    private static final long serialVersionUID = 1139237315;

    /**
     * The reference instance of <code>barbershopvip.admin_user</code>
     */
    public static final AdminUser ADMIN_USER = new AdminUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminUserRecord> getRecordType() {
        return AdminUserRecord.class;
    }

    /**
     * The column <code>barbershopvip.admin_user.username</code>. 用户名
     */
    public final TableField<AdminUserRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "用户名");

    /**
     * The column <code>barbershopvip.admin_user.password</code>. 密码
     */
    public final TableField<AdminUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "密码");

    /**
     * The column <code>barbershopvip.admin_user.id</code>.
     */
    public final TableField<AdminUserRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>barbershopvip.admin_user</code> table reference
     */
    public AdminUser() {
        this("admin_user", null);
    }

    /**
     * Create an aliased <code>barbershopvip.admin_user</code> table reference
     */
    public AdminUser(String alias) {
        this(alias, ADMIN_USER);
    }

    private AdminUser(String alias, Table<AdminUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminUser(String alias, Table<AdminUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Barbershopvip.BARBERSHOPVIP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AdminUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ADMIN_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdminUserRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdminUserRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminUserRecord>>asList(Keys.KEY_ADMIN_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AdminUser as(String alias) {
        return new AdminUser(alias, this);
    }

    /**
     * Rename this table
     */
    public AdminUser rename(String name) {
        return new AdminUser(name, null);
    }
}
